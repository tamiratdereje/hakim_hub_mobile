// Mocks generated by Mockito 5.4.2 from annotations
// in hakim_hub_mobile/test/features/hospital/domain/usecases/get_all_hospitals_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:hakim_hub_mobile/core/error/failures.dart' as _i5;
import 'package:hakim_hub_mobile/features/hospital/domain/entities/filter_hospital_domain.dart'
    as _i7;
import 'package:hakim_hub_mobile/features/hospital/domain/entities/hospital_search_domain.dart'
    as _i6;
import 'package:hakim_hub_mobile/features/hospital/domain/repositories/search_hospitals_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HospitalsSearchRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHospitalsSearchRepository extends _i1.Mock
    implements _i3.HospitalsSearchRepository {
  MockHospitalsSearchRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.InstitutionSearchDomain>>>
      searchByFilterHospitals(_i7.FilterHospitalDomain? filterHospitalDomain) =>
          (super.noSuchMethod(
            Invocation.method(
              #searchByFilterHospitals,
              [filterHospitalDomain],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure,
                        List<_i6.InstitutionSearchDomain>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.InstitutionSearchDomain>>(
              this,
              Invocation.method(
                #searchByFilterHospitals,
                [filterHospitalDomain],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.Failure, List<_i6.InstitutionSearchDomain>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.InstitutionSearchDomain>>>
      searchByNameHospitals(String? name) => (super.noSuchMethod(
            Invocation.method(
              #searchByNameHospitals,
              [name],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure,
                        List<_i6.InstitutionSearchDomain>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.InstitutionSearchDomain>>(
              this,
              Invocation.method(
                #searchByNameHospitals,
                [name],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.Failure, List<_i6.InstitutionSearchDomain>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.InstitutionSearchDomain>>>
      getAllHospitals() => (super.noSuchMethod(
            Invocation.method(
              #getAllHospitals,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure,
                        List<_i6.InstitutionSearchDomain>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.InstitutionSearchDomain>>(
              this,
              Invocation.method(
                #getAllHospitals,
                [],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.Failure, List<_i6.InstitutionSearchDomain>>>);
}